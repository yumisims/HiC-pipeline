#!/usr/bin/env perl
#
# Author: yy5@sanger.ac.uk
#

use strict;
use warnings;
use Carp;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

use File::Basename;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{verbose} = 1;
    $$self{samtools} = '/software/grit/bin/samtools';
    $$self{python2} = '/usr/bin/python2.7';
    $$self{pretext} = '/nfs/team117_rnd/eh15/PretextBuilds/PretextMap/0.0.41/Linux-x86-64/PretextMap';
    $$self{bwa}      = '/software/grit/bin/bwa';
    $$self{bamToBed} = '/software/grit/bin/bamToBed';
    $$self{salsa}    = '/nfs/team135/yy5/SALSA';
    $$self{java}     = '/software/vertres/bin-external/java8';
    $$self{juicertl} = '/nfs/users/nfs_d/dg30/luster_dg30/dg30/projects/vgp/tools/juicer_tools.1.8.9_jcuda.0.8.jar';
    $$self{picard}   = '/software/vertres/bin-external/picard-2.18.11.jar';
    $$self{bammarkduplicates2} = '/software/grit/tools/biobambam2/bin/bammarkduplicates2';
    $$self{arima_mapping_pipeline} = '/nfs/team135/yy5/arima_mapping_pipeline';
    $$self{break} = 0;
    $$self{limits}   = { memory=>3_500 };
    $$self{config_version} = '1427807557';
    $$self{_sampleconf} = q[
            # For sanity checking that your config file is not obsolete. Update
            # the version key in your config file to get rid of the warnings.
            version  => '] .$$self{config_version}. q[',
    ]."\n";

    $$self{usage} .=
        "About: Generate HiC contact map for the input assembly\n" .
        "Usage: run-hic\n" .
        "Options:\n" .
        "   -f, --fofn <file>        path to file listing input uBAM or uCRAM files\n" .
        "   -r, --ref-fa <file>      reference sequence in fasta format\n" .
        "   -o, --outdir <dir>       output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {   
        if ( $arg eq '-b' or $arg eq '--break' ) { $$self{break}=1; next; }
        if ( $arg eq '-f' or $arg eq '--fofn' ) { $$self{fofn}=shift(@ARGV); next; }
        if ( $arg eq '-r' or $arg eq '--genome' ) { $$self{genome}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        if ( $arg eq '-s' or $arg eq '--hname' ) { $$self{hname}=shift(@ARGV); next; }
        if ( $arg eq '-q' or $arg eq '--qscore' ) { $$self{qscore}=shift(@ARGV); next; }
        if ( $arg eq '-z' or $arg eq '--finish_file' ) { $$self{finish_file}=shift(@ARGV); next; }
        if ( $arg eq '-?' or $arg eq '-h' or $arg eq '--help' ) { $self->throw(); }
        $self->throw("Unknown argument: $arg\n");
    }
    if ( !defined($$self{outdir}) ) { $self->throw("Expected the -o option."); }
    if ( !defined($$self{genome}) ) { $self->throw("Expected the -r option."); }
    if ( !defined($$self{fofn}) ) { $self->throw("Expected the -f option."); }
    if ( !defined($$self{hname}) ) { $self->throw("Expected the -s option."); }
    if ( !defined($$self{qscore}) ) { $self->throw("Expected the -q option."); }
    if ( !defined($$self{finish_file}) ) { $self->throw("Expected the -z option."); }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();
    `mkdir -p $$self{outdir}`;
    $self->save_config('higlass');

    if ( $self->is_finished("$$self{finish_file}") ) { $self->all_done; }

    # prepare the reference assembly
    $self->set_limits(memory => 10240, time => 1200, cpus => 2);
    $self->spawn('bwa_index', qq[$$self{outdir}/ref/.bwa_index.done]);
    $self->wait();

    my $bams = $self->read_list($$self{fofn});

    # single-end mapping with bwa mem followed by 5' filtering
    $self->set_limits(memory => 10240, time => 1200, cpus => 16);
    my $idx = 0;
    foreach my $bam (@$bams)
    {
        my $base = basename($bam);
        $base =~ s/\.(cr|b)am$//;
        $self->spawn('bwa_mem',qq[$$self{outdir}/$idx/$base.mem.filt.1.bam],$bam,0x40); # single end mapping and filtering of READ1
        $self->spawn('bwa_mem',qq[$$self{outdir}/$idx/$base.mem.filt.2.bam],$bam,0x80); # single end mapping and filtering of READ2
        $idx++;
    }
    $self->wait();

    # combine read pairs, then sort
    $self->set_limits(memory => 10240, time => 1200, cpus => 16);
    my @merge_bams = ();
    $idx = 0;
    foreach my $bam (@$bams)
    {
        my $base = basename($bam);
        $base =~ s/\.(cr|b)am$//;
        $self->spawn('combine',qq[$$self{outdir}/$idx/$base.mem.filt.paired.sort.bam],qq[$$self{outdir}/$idx/$base.mem.filt.1.bam],qq[$$self{outdir}/$idx/$base.mem.filt.2.bam]);
        push @merge_bams, qq[$$self{outdir}/$idx/$base.mem.filt.paired.sort.bam];
        $idx++;
    }
    $self->wait();

    # merge
    $self->set_limits(memory => 10240, time => 1200, cpus => 16);
    $self->spawn('merge',qq[$$self{outdir}/merge.bam],@merge_bams);
    $self->wait();

    #pretext
    $self->set_limits(memory => 10240, time => 1200, cpus => 16);
    $self->spawn('make_pretext',qq[$$self{outdir}/out.pretext],qq[$$self{outdir}/merge.bam]);
    
    # gather bam stats
    $self->set_limits(memory => 1000, time => 100, cpus => 4);
    foreach my $bam (@merge_bams,qq[$$self{outdir}/merge.bam])
    {
        $self->spawn('bamstats',"$bam.stats",$bam);
    }

    # mark duplicates
    # $self->set_limits(memory => 60240, time => 1200, cpus => 2);
    # $self->spawn('mkdup',qq[$$self{outdir}/merge.mkdup.bam],qq[$$self{outdir}/merge.bam]);
    $self->set_limits(memory => 60240, time => 1200, cpus => 16);
    $self->spawn('mkdup2',qq[$$self{outdir}/merge.mkdup.bam],qq[$$self{outdir}/merge.bam]);
    $self->wait();

    # all stats
    $self->set_limits(memory => 1000, time => 100, cpus => 4);
    $self->spawn('bamstats',qq[$$self{outdir}/merge.mkdup.bam.stats],qq[$$self{outdir}/merge.mkdup.bam]);

    # bam2bed
    $self->set_limits(memory => 60240, time => 1200, cpus => 12);
    $self->spawn('bam2bed',qq[$$self{outdir}/merge.mkdup.bed],qq[$$self{outdir}/merge.mkdup.bam]);
    $self->wait();

    # hic
    $self->set_limits(memory => 60240, time => 1200, cpus => 12);
    $self->spawn('higlass',qq[$$self{outdir}/pre.bed],qq[$$self{outdir}/merge.mkdup.bed]);
    $self->wait();

    $self->set_limits(memory => 60240, time => 1200, cpus => 12);
    $self->spawn('make_mcool',qq[$$self{outdir}/$$self{hname}.mcool],qq[$$self{outdir}/pre.bed]);
    $self->wait();

    $self->cmd("touch $$self{finish_file}");
    $self->all_done;
}

sub bwa_index
{
    my ($self,$outfile) = @_;
    my $ref = $$self{genome};
    $self->cmd(qq[$$self{samtools} faidx $ref]);
    $self->cmd(qq[$$self{bwa} index $ref]);
    $self->cmd(qq[touch $outfile]);
}

sub bwa_mem
{
    my ($self,$outfile,$ubam,$filter) = @_;
    my @rg_lines = ();
    my $fh;
    open($fh, "$$self{samtools} view -H $ubam |") || die;
    while (<$fh>) {
        chomp;
        if (/^\@RG\t/) {
            s/\t/\\t/g;
            push(@rg_lines, "-H'$_'");
        }
    }
    close($fh);
    $self->throw("No \@RG lines found in $ubam") unless @rg_lines;
    my $ref = qq[$$self{genome}];
    $self->cmd(qq[$$self{samtools} view -hf$filter $ubam | $$self{samtools} fastq - | $$self{bwa} mem -t12 -B8 @rg_lines $ref - | perl $$self{arima_mapping_pipeline}/filter_five_end.pl | $$self{samtools} view -\@4 -b - > $outfile.part]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub combine
{
    my ($self,$outfile,$bam1,$bam2) = @_;
    $self->cmd(qq[perl $$self{arima_mapping_pipeline}/two_read_bam_combiner.pl $bam1 $bam2 $$self{samtools} $$self{qscore} | $$self{samtools}  sort -\@12 -T $outfile.sort.tmp -o $outfile.part -]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub merge
{
    my ($self,$outfile,@merge_bams) = @_;
    $self->cmd(qq[$$self{samtools} merge -\@12 - @merge_bams | tee $outfile.part | $$self{samtools} index -c -\@4 - $outfile.csi]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub mkdup
{
    my ($self,$outfile,$bam) = @_;
    my $outdir = dirname($outfile);
    $self->cmd("$$self{java} -Xmx24000m -Xms24000m -server -XX:+UseSerialGC -jar $$self{picard} MarkDuplicates INPUT=$bam OUTPUT=$outfile.part METRICS_FILE=$outfile.metrics.txt TMP_DIR=$outdir/tmp ASSUME_SORTED=TRUE VALIDATION_STRINGENCY=LENIENT",java_err_file=>"$outfile.java");
    $self->cmd("$$self{samtools} index -c $outfile.part");
    rename("$outfile.part.csi","$outfile.csi") or $self->throw("rename $outfile.part.v $outfile.csi: $!");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub mkdup2
{
    my ($self,$outfile,$bam) = @_;
    my $outdir = dirname($outfile);
    $self->cmd("$$self{bammarkduplicates2} I=$bam O=$outfile.part M=$outfile.metrics.txt tmpfile=$outdir/bammkdup2 markthreads=16");
    $self->cmd("$$self{samtools} index -c $outfile.part");
    rename("$outfile.part.csi","$outfile.csi") or $self->throw("rename $outfile.part.csi $outfile.csi: $!");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub bam2bed
{
    my ($self,$outfile,$bam) = @_;
    $self->cmd(qq[$$self{samtools} view -\@4 -u -F0x400 $bam | $$self{bamToBed} | sort -k4 --parallel=8 -S50G > $outfile.part]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub higlass
{
    my ($self,$outfile,$bed) = @_;
    my $ref = qq[$$self{genome}];
    my $ref_base = basename($ref, ".fa");
    my $ref_path = dirname($ref);
    my $ref_index = qq[$ref_path/$ref_base.fa.fai];
    $self->cmd(qq[cut -f1,2 $ref_index | sed 's/-/_/g'|sort -k2,2 -nr > $$self{outdir}/$$self{hname}.genome]);
    $self->cmd(qq[paste -d '\\t' - - < $bed | sed 's/-/_/g' | awk 'BEGIN {FS="\\t"; OFS="\\t"} {if (\$1 > \$7) {print substr(\$4,1,length(\$4)-2),\$12,\$7,\$8,"16",\$6,\$1,\$2,"8",\$11,\$5} else { print substr(\$4,1,length(\$4)-2),\$6,\$1,\$2,"8",\$12,\$7,\$8,"16",\$5,\$11} }' | tr '\\-+' '01'  | sort --parallel=8 -S10G -k3,3d -k7,7d > $outfile.part]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");

}

sub make_mcool
{
    my ($self,$outfile,$bed) = @_;
    my $ref_path = dirname($$self{genome});
    $self->cmd(qq[cooler cload pairs -0 -c1 3 -p1 4 -c2 7 -p2 8 $$self{outdir}/$$self{hname}.genome:1000 $bed $$self{outdir}/$$self{hname}.cool]);
	$self->cmd(qq[cooler zoomify -o $outfile.part $$self{outdir}/$$self{hname}.cool]);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}
sub make_pretext
{
   my ($self,$outfile,$bam) = @_;
   $self->cmd(qq[$$self{samtools} view -h $bam|$$self{pretext} -o $outfile.part --sortby length --mapq $$self{qscore}]);
   rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub bamstats
{
    my ($self,$outfile,$bam) = @_;
    $self->cmd("$$self{samtools} stats -\@4 -F0xb00 $bam > $outfile.part");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}


sub read_list
{
    my ($self, $file) = @_;
    my @list;
    open(my $fh, "<$file") or $self->throw("Could not open file $file: $!");
    while (<$fh>)
    {
        chomp;
        next if (/^#/);
        push(@list, $_);
    }
    close($fh) or $self->throw("Could not close $file: $!");
    return \@list;
}

sub write_list
{
    my ($self, $file, $list) = @_;
    open(my $fh, ">$file") or $self->throw("Could not open file $file: $!");
    foreach my $item (@$list)
    {
        print $fh "$item\n";
    }
    close($fh) or $self->throw("Could not close $file: $!");
}

sub save_config
{
    my ($self,$name) = @_;
    my $src = exists $$self{_config} ? $$self{_config} : '';
    my $dst = "$$self{outdir}/$name.conf";
    if ( -e $dst && $src && (stat($src))[9] <= (stat($dst))[9] ) { return; }
    # if ( -e $dst && !$src) { return; }
    if ( !-d $$self{outdir} ) { $self->cmd("mkdir -p $$self{outdir}"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    $self->cmd("cat $src >> $dst") if $src;
}

